'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _asyncbox = require('asyncbox');

var _appiumSupport = require('appium-support');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var APP_EXTENSION = '.apk';
// These constants are in sync with
// https://developer.apple.com/documentation/xctest/xcuiapplicationstate/xcuiapplicationstaterunningbackground?language=objc
var APP_STATE_NOT_INSTALLED = 0;
var APP_STATE_NOT_RUNNING = 1;
var APP_STATE_RUNNING_IN_BACKGROUND = 3;
var APP_STATE_RUNNING_IN_FOREGROUND = 4;

var commands = {};

/**
 * Verify whether an application is installed or not
 *
 * @param {string} appId - Application package identifier
 * @returns {boolean} true if the app is installed
 */
commands.isAppInstalled = function callee$0$0(appId) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.isAppInstalled(appId));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Queries the current state of the app.
 *
 * @param {string} appId - Application package identifier
 * @returns {number} The corresponding constant, which describes
 *                   the current application state:
 * 0 - is the app is not installed
 * 1 - if the app is installed, but is not running
 * 3 - if the app is running in the background
 * 4 - if the app is running in the foreground
 */
commands.queryAppState = function callee$0$0(appId) {
  var output, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, line;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].info('Querying the state of \'' + appId + '\'');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.isAppInstalled(appId));

      case 3:
        if (context$1$0.sent) {
          context$1$0.next = 5;
          break;
        }

        return context$1$0.abrupt('return', APP_STATE_NOT_INSTALLED);

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.adb.processExists(appId));

      case 7:
        if (context$1$0.sent) {
          context$1$0.next = 9;
          break;
        }

        return context$1$0.abrupt('return', APP_STATE_NOT_RUNNING);

      case 9:
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.adb.shell(['dumpsys', 'window', 'windows']));

      case 11:
        output = context$1$0.sent;
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 15;
        _iterator = _getIterator(output.split('\n'));

      case 17:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 24;
          break;
        }

        line = _step.value;

        if (!(line.includes(appId) && (line.includes('mCurrentFocus') || line.includes('mFocusedApp')))) {
          context$1$0.next = 21;
          break;
        }

        return context$1$0.abrupt('return', APP_STATE_RUNNING_IN_FOREGROUND);

      case 21:
        _iteratorNormalCompletion = true;
        context$1$0.next = 17;
        break;

      case 24:
        context$1$0.next = 30;
        break;

      case 26:
        context$1$0.prev = 26;
        context$1$0.t0 = context$1$0['catch'](15);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 30:
        context$1$0.prev = 30;
        context$1$0.prev = 31;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 33:
        context$1$0.prev = 33;

        if (!_didIteratorError) {
          context$1$0.next = 36;
          break;
        }

        throw _iteratorError;

      case 36:
        return context$1$0.finish(33);

      case 37:
        return context$1$0.finish(30);

      case 38:
        return context$1$0.abrupt('return', APP_STATE_RUNNING_IN_BACKGROUND);

      case 39:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[15, 26, 30, 38], [31,, 33, 37]]);
};

/**
 * Activates the given application or launches it if necessary.
 * The action is done with monkey tool and literally simulates
 * clicking the corresponding application icon on the dashboard.
 *
 * @param {string} appId - Application package identifier
 */
commands.activateApp = function callee$0$0(appId) {
  var cmd, output;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        cmd = ['monkey', '-p', appId, '-c', 'android.intent.category.LAUNCHER', '1'];
        output = '';
        context$1$0.prev = 2;

        _logger2['default'].debug('Activating \'' + appId + '\' with \'adb shell ' + cmd.join(' ') + '\' command');
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.adb.shell(cmd));

      case 6:
        output = context$1$0.sent;

        _logger2['default'].debug('Command stdout: ' + output);
        context$1$0.next = 13;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](2);

        _logger2['default'].errorAndThrow('Cannot activate \'' + appId + '\'. Original error: ' + context$1$0.t0.message);

      case 13:
        if (output.includes('monkey aborted')) {
          _logger2['default'].errorAndThrow('Cannot activate \'' + appId + '\'. Are you sure it is installed?');
        }

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[2, 10]]);
};

/**
 * @typedef {Object} UninstallOptions
 * @property {number} timeout [20000] - The count of milliseconds to wait until the
 *                                      app is uninstalled.
 * @property {boolean} keepData [false] - Set to true in order to keep the
 *                                        application data and cache folders after uninstall.
 */

/**
 * Remove the corresponding application if is installed.
 * The call is ignored if the app is not installed.
 *
 * @param {string} appId - Application package identifier
 * @param {?UninstallOptions} options - The set of removal options
 * @returns {boolean} True if the package was found on the device and
 *                    successfully uninstalled.
 */
commands.removeApp = function callee$0$0(appId) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.uninstallApk(appId, options));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * @typedef {Object} TerminateOptions
 * @property {number|string} timeout [500] - The count of milliseconds to wait until the
 *                                           app is terminated.
 */

/**
 * Terminates the app if it is running.
 *
 * @param {string} appId - Application package identifier
 * @param {?TerminateOptions} options - The set of application termination options
 * @returns {boolean} True if the app has been successfully terminated.
 * @throws {Error} if the app has not been terminated within the given timeout.
 */
commands.terminateApp = function callee$0$0(appId) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var timeout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].info('Terminating \'' + appId + '\'');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.processExists(appId));

      case 3:
        if (!context$1$0.sent) {
          context$1$0.next = 6;
          break;
        }

        _logger2['default'].info('The app \'' + appId + '\' is not running');
        return context$1$0.abrupt('return', false);

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.adb.forceStop(appId));

      case 8:
        timeout = _appiumSupport.util.hasValue(options.timeout) && !isNaN(options.timeout) ? parseInt(options.timeout, 10) : 500;
        context$1$0.prev = 9;
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.queryAppState(appId));

              case 2:
                context$2$0.t0 = context$2$0.sent;
                context$2$0.t1 = APP_STATE_NOT_RUNNING;
                return context$2$0.abrupt('return', context$2$0.t0 <= context$2$0.t1);

              case 5:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }, { waitMs: timeout, intervalMs: 100 }));

      case 12:
        context$1$0.next = 17;
        break;

      case 14:
        context$1$0.prev = 14;
        context$1$0.t0 = context$1$0['catch'](9);

        _logger2['default'].errorAndThrow('\'' + appId + '\' is still running after ' + timeout + 'ms timeout');

      case 17:
        _logger2['default'].info('\'' + appId + '\' has been successfully terminated');
        return context$1$0.abrupt('return', true);

      case 19:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[9, 14]]);
};

/**
 * @typedef {Object} InstallOptions
 * @property {number} timeout [60000] - The count of milliseconds to wait until the
 *                                      app is installed.
 * @property {boolean} allowTestPackages [false] - Set to true in order to allow test
 *                                                 packages installation.
 * @property {boolean} useSdcard [false] - Set to true to install the app on sdcard
 *                                         instead of the device memory.
 * @property {boolean} grantPermissions [false] - Set to true in order to grant all the
 *                                                permissions requested in the application's manifest
 *                                                automatically after the installation is completed
 *                                                under Android 6+.
 * @property {boolean} replace [true] - Set it to false if you don't want
 *                                      the application to be upgraded/reinstalled
 *                                      if it is already present on the device.
 */

/**
 * Installs the given application to the device under test
 *
 * @param {string} appPath - The local apk path or a remote url
 * @param {?InstallOptions} options - The set of installation options
 * @throws {Error} if the given apk does not exist or is not reachable
 */
commands.installApp = function callee$0$0(appPath) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.helpers.configureApp(appPath, APP_EXTENSION));

      case 2:
        appPath = context$1$0.sent;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(appPath));

      case 5:
        if (context$1$0.sent) {
          context$1$0.next = 7;
          break;
        }

        _logger2['default'].errorAndThrow('Could not find app apk at ' + appPath);

      case 7:
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.adb.install(appPath, options));

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

exports.commands = commands;
exports['default'] = commands;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
