'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _teen_process = require('teen_process');

var _asyncbox = require('asyncbox');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _appiumSupport = require('appium-support');

var _appiumAndroidIme = require('appium-android-ime');

var _ioAppiumSettings = require('io.appium.settings');

var _appiumUnlock = require('appium-unlock');

var _appiumAndroidBootstrap = require('appium-android-bootstrap');

var _appiumAndroidBootstrap2 = _interopRequireDefault(_appiumAndroidBootstrap);

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var _unlockHelpers = require('./unlock-helpers');

var _unlockHelpers2 = _interopRequireDefault(_unlockHelpers);

var PACKAGE_INSTALL_TIMEOUT = 90000; // milliseconds
var CHROME_BROWSERS = ["Chrome", "Chromium", "Chromebeta", "Browser", "chrome", "chromium", "chromebeta", "browser", "chromium-browser", "chromium-webview"];
var SETTINGS_HELPER_PKG_ID = 'io.appium.settings';
var SETTINGS_HELPER_PKG_ACTIVITY = ".Settings";
var UNLOCK_HELPER_PKG_ID = 'io.appium.unlock';
var UNLOCK_HELPER_PKG_ACTIVITY = ".Unlock";

var helpers = {};

helpers.parseJavaVersion = function (stderr) {
  var lines = stderr.split("\n");
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(lines), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var line = _step.value;

      if (new RegExp(/(java|openjdk) version/).test(line)) {
        return line.split(" ")[2].replace(/"/g, '');
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return null;
};

helpers.getJavaVersion = function callee$0$0() {
  var _ref, stderr, javaVer;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug("Getting Java version");

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('java', ['-version']));

      case 3:
        _ref = context$1$0.sent;
        stderr = _ref.stderr;
        javaVer = helpers.parseJavaVersion(stderr);

        if (!(javaVer === null)) {
          context$1$0.next = 8;
          break;
        }

        throw new Error("Could not get the Java version. Is Java installed?");

      case 8:
        _logger2['default'].info('Java version is: ' + javaVer);
        return context$1$0.abrupt('return', javaVer);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.prepareEmulator = function callee$0$0(adb, opts) {
  var avd, avdArgs, language, locale, avdLaunchTimeout, avdReadyTimeout, avdName, runningAVD;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        avd = opts.avd;
        avdArgs = opts.avdArgs;
        language = opts.language;
        locale = opts.locale;
        avdLaunchTimeout = opts.avdLaunchTimeout;
        avdReadyTimeout = opts.avdReadyTimeout;

        if (avd) {
          context$1$0.next = 8;
          break;
        }

        throw new Error("Cannot launch AVD without AVD name");

      case 8:
        avdName = avd.replace('@', '');
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(adb.getRunningAVD(avdName));

      case 11:
        runningAVD = context$1$0.sent;

        if (!(runningAVD !== null)) {
          context$1$0.next = 21;
          break;
        }

        if (!(avdArgs && avdArgs.toLowerCase().indexOf("-wipe-data") > -1)) {
          context$1$0.next = 19;
          break;
        }

        _logger2['default'].debug('Killing \'' + avdName + '\' because it needs to be wiped at start.');
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap(adb.killEmulator(avdName));

      case 17:
        context$1$0.next = 21;
        break;

      case 19:
        _logger2['default'].debug("Not launching AVD because it is already running.");
        return context$1$0.abrupt('return');

      case 21:
        avdArgs = this.prepareAVDArgs(opts, adb, avdArgs);
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(adb.launchAVD(avd, avdArgs, language, locale, avdLaunchTimeout, avdReadyTimeout));

      case 24:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.prepareAVDArgs = function (opts, adb, avdArgs) {
  var args = [];
  if (!_lodash2['default'].isUndefined(opts.networkSpeed)) {
    var networkSpeed = this.ensureNetworkSpeed(adb, opts.networkSpeed);
    args.push('-netspeed', networkSpeed);
  }
  if (opts.isHeadless) {
    args.push('-no-window');
  }
  return args.length ? avdArgs + ' ' + args.join(' ') : avdArgs;
};

helpers.ensureNetworkSpeed = function (adb, networkSpeed) {
  if (_lodash2['default'].values(adb.NETWORK_SPEED).indexOf(networkSpeed) !== -1) {
    return networkSpeed;
  }
  _logger2['default'].warn('Wrong network speed param ' + networkSpeed + ', using default: full. Supported values: ' + _lodash2['default'].values(adb.NETWORK_SPEED));
  return adb.NETWORK_SPEED.FULL;
};

helpers.ensureDeviceLocale = function callee$0$0(adb, language, country) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(!_lodash2['default'].isString(language) && !_lodash2['default'].isString(country))) {
          context$1$0.next = 4;
          break;
        }

        _logger2['default'].warn('setDeviceLanguageCountry requires language or country.');
        _logger2['default'].warn('Got language: \'' + language + '\' and country: \'' + country + '\'');
        return context$1$0.abrupt('return');

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(adb.setDeviceLanguageCountry(language, country));

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(adb.ensureCurrentLocale(language, country));

      case 8:
        if (context$1$0.sent) {
          context$1$0.next = 10;
          break;
        }

        throw new Error('Failed to set language: ' + language + ' and country: ' + country);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.getDeviceInfoFromCaps = function callee$0$0() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var adb, udid, emPort, devices, availDevicesStr, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, device, deviceOS;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumAdb2['default'].createADB({
          javaVersion: opts.javaVersion,
          adbPort: opts.adbPort,
          remoteAdbHost: opts.remoteAdbHost,
          clearDeviceLogsOnStart: opts.clearDeviceLogsOnStart
        }));

      case 2:
        adb = context$1$0.sent;
        udid = opts.udid;
        emPort = null;

        if (!opts.avd) {
          context$1$0.next = 12;
          break;
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(helpers.prepareEmulator(adb, opts));

      case 8:
        udid = adb.curDeviceId;
        emPort = adb.emulatorPort;
        context$1$0.next = 64;
        break;

      case 12:
        // no avd given. lets try whatever's plugged in devices/emulators
        _logger2['default'].info("Retrieving device list");
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(adb.getDevicesWithRetry());

      case 15:
        devices = context$1$0.sent;

        if (!udid) {
          context$1$0.next = 21;
          break;
        }

        if (!_lodash2['default'].includes(_lodash2['default'].map(devices, 'udid'), udid)) {
          _logger2['default'].errorAndThrow('Device ' + udid + ' was not in the list ' + 'of connected devices');
        }
        emPort = adb.getPortFromEmulatorString(udid);
        context$1$0.next = 64;
        break;

      case 21:
        if (!opts.platformVersion) {
          context$1$0.next = 62;
          break;
        }

        opts.platformVersion = ('' + opts.platformVersion).trim();

        // a platform version was given. lets try to find a device with the same os
        _logger2['default'].info('Looking for a device with Android \'' + opts.platformVersion + '\'');

        // in case we fail to find something, give the user a useful log that has
        // the device udids and os versions so they know what's available
        availDevicesStr = [];
        _iteratorNormalCompletion2 = true;
        _didIteratorError2 = false;
        _iteratorError2 = undefined;
        context$1$0.prev = 28;
        _iterator2 = _getIterator(devices);

      case 30:
        if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
          context$1$0.next = 44;
          break;
        }

        device = _step2.value;
        context$1$0.next = 34;
        return _regeneratorRuntime.awrap(adb.setDeviceId(device.udid));

      case 34:
        context$1$0.next = 36;
        return _regeneratorRuntime.awrap(adb.getPlatformVersion());

      case 36:
        deviceOS = context$1$0.sent;

        // build up our info string of available devices as we iterate
        availDevicesStr.push(device.udid + ' (' + deviceOS + ')');

        // we do a begins with check for implied wildcard matching
        // eg: 4 matches 4.1, 4.0, 4.1.3-samsung, etc

        if (!(deviceOS.indexOf(opts.platformVersion) === 0)) {
          context$1$0.next = 41;
          break;
        }

        udid = device.udid;
        return context$1$0.abrupt('break', 44);

      case 41:
        _iteratorNormalCompletion2 = true;
        context$1$0.next = 30;
        break;

      case 44:
        context$1$0.next = 50;
        break;

      case 46:
        context$1$0.prev = 46;
        context$1$0.t0 = context$1$0['catch'](28);
        _didIteratorError2 = true;
        _iteratorError2 = context$1$0.t0;

      case 50:
        context$1$0.prev = 50;
        context$1$0.prev = 51;

        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }

      case 53:
        context$1$0.prev = 53;

        if (!_didIteratorError2) {
          context$1$0.next = 56;
          break;
        }

        throw _iteratorError2;

      case 56:
        return context$1$0.finish(53);

      case 57:
        return context$1$0.finish(50);

      case 58:

        // we couldn't find anything! quit
        if (!udid) {
          _logger2['default'].errorAndThrow('Unable to find an active device or emulator ' + ('with OS ' + opts.platformVersion + '. The following ') + 'are available: ' + availDevicesStr.join(', '));
        }

        emPort = adb.getPortFromEmulatorString(udid);
        context$1$0.next = 64;
        break;

      case 62:
        // a udid was not given, grab the first device we see
        udid = devices[0].udid;
        emPort = adb.getPortFromEmulatorString(udid);

      case 64:

        _logger2['default'].info('Using device: ' + udid);
        return context$1$0.abrupt('return', { udid: udid, emPort: emPort });

      case 66:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[28, 46, 50, 58], [51,, 53, 57]]);
};

// returns a new adb instance with deviceId set
helpers.createADB = function callee$0$0(javaVersion, udid, emPort, adbPort, suppressKillServer, remoteAdbHost, clearDeviceLogsOnStart) {
  var adb;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumAdb2['default'].createADB({
          javaVersion: javaVersion,
          adbPort: adbPort,
          suppressKillServer: suppressKillServer,
          remoteAdbHost: remoteAdbHost,
          clearDeviceLogsOnStart: clearDeviceLogsOnStart
        }));

      case 2:
        adb = context$1$0.sent;

        adb.setDeviceId(udid);
        if (emPort) {
          adb.setEmulatorPort(emPort);
        }

        return context$1$0.abrupt('return', adb);

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.getLaunchInfo = function callee$0$0(adb, opts) {
  var app, appPackage, appActivity, appWaitPackage, appWaitActivity, _ref2, apkPackage, apkActivity;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        app = opts.app;
        appPackage = opts.appPackage;
        appActivity = opts.appActivity;
        appWaitPackage = opts.appWaitPackage;
        appWaitActivity = opts.appWaitActivity;

        if (app) {
          context$1$0.next = 8;
          break;
        }

        _logger2['default'].warn("No app sent in, not parsing package/activity");
        return context$1$0.abrupt('return');

      case 8:
        if (!(appPackage && appActivity)) {
          context$1$0.next = 10;
          break;
        }

        return context$1$0.abrupt('return');

      case 10:

        _logger2['default'].debug("Parsing package and activity from app manifest");
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(adb.packageAndLaunchActivityFromManifest(app));

      case 13:
        _ref2 = context$1$0.sent;
        apkPackage = _ref2.apkPackage;
        apkActivity = _ref2.apkActivity;

        if (apkPackage && !appPackage) {
          appPackage = apkPackage;
        }
        if (!appWaitPackage) {
          appWaitPackage = appPackage;
        }
        if (apkActivity && !appActivity) {
          appActivity = apkActivity;
        }
        if (!appWaitActivity) {
          appWaitActivity = appActivity;
        }
        _logger2['default'].debug('Parsed package and activity are: ' + apkPackage + '/' + apkActivity);
        return context$1$0.abrupt('return', { appPackage: appPackage, appWaitPackage: appWaitPackage, appActivity: appActivity, appWaitActivity: appWaitActivity });

      case 22:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.resetApp = function callee$0$0(adb) {
  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var app, appPackage, fastReset, fullReset, _opts$androidInstallTimeout, androidInstallTimeout, autoGrantPermissions, isInstalled, output;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        app = opts.app;
        appPackage = opts.appPackage;
        fastReset = opts.fastReset;
        fullReset = opts.fullReset;
        _opts$androidInstallTimeout = opts.androidInstallTimeout;
        androidInstallTimeout = _opts$androidInstallTimeout === undefined ? PACKAGE_INSTALL_TIMEOUT : _opts$androidInstallTimeout;
        autoGrantPermissions = opts.autoGrantPermissions;

        if (appPackage) {
          context$1$0.next = 9;
          break;
        }

        throw new Error("'appPackage' option is required");

      case 9:
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(adb.isAppInstalled(appPackage));

      case 11:
        isInstalled = context$1$0.sent;

        if (!isInstalled) {
          context$1$0.next = 37;
          break;
        }

        context$1$0.prev = 13;
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(adb.forceStop(appPackage));

      case 16:
        context$1$0.next = 20;
        break;

      case 18:
        context$1$0.prev = 18;
        context$1$0.t0 = context$1$0['catch'](13);

      case 20:
        if (!(!fullReset && fastReset)) {
          context$1$0.next = 37;
          break;
        }

        context$1$0.next = 23;
        return _regeneratorRuntime.awrap(adb.clear(appPackage));

      case 23:
        output = context$1$0.sent;

        if (!(_lodash2['default'].isString(output) && output.toLowerCase().includes('failed'))) {
          context$1$0.next = 26;
          break;
        }

        throw new Error('Cannot clear the application data of \'' + appPackage + '\'. Original error: ' + output);

      case 26:
        if (!autoGrantPermissions) {
          context$1$0.next = 35;
          break;
        }

        context$1$0.prev = 27;
        context$1$0.next = 30;
        return _regeneratorRuntime.awrap(adb.grantAllPermissions(appPackage));

      case 30:
        context$1$0.next = 35;
        break;

      case 32:
        context$1$0.prev = 32;
        context$1$0.t1 = context$1$0['catch'](27);

        _logger2['default'].error('Unable to grant permissions requested. Original error: ' + context$1$0.t1.message);

      case 35:
        _logger2['default'].debug('Performed fast reset on the installed \'' + appPackage + '\' application (stop and clear)');
        return context$1$0.abrupt('return');

      case 37:
        if (app) {
          context$1$0.next = 39;
          break;
        }

        throw new Error("'app' option is required for reinstall");

      case 39:

        _logger2['default'].debug('Running full reset on \'' + appPackage + '\' (reinstall)');

        if (!isInstalled) {
          context$1$0.next = 43;
          break;
        }

        context$1$0.next = 43;
        return _regeneratorRuntime.awrap(adb.uninstallApk(appPackage));

      case 43:
        context$1$0.next = 45;
        return _regeneratorRuntime.awrap(adb.install(app, {
          grantPermissions: autoGrantPermissions,
          timeout: androidInstallTimeout
        }));

      case 45:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[13, 18], [27, 32]]);
};

helpers.installApk = function callee$0$0(adb) {
  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var app, appPackage, fastReset, fullReset, _opts$androidInstallTimeout2, androidInstallTimeout, autoGrantPermissions;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        app = opts.app;
        appPackage = opts.appPackage;
        fastReset = opts.fastReset;
        fullReset = opts.fullReset;
        _opts$androidInstallTimeout2 = opts.androidInstallTimeout;
        androidInstallTimeout = _opts$androidInstallTimeout2 === undefined ? PACKAGE_INSTALL_TIMEOUT : _opts$androidInstallTimeout2;
        autoGrantPermissions = opts.autoGrantPermissions;

        if (!(!app || !appPackage)) {
          context$1$0.next = 9;
          break;
        }

        throw new Error("'app' and 'appPackage' options are required");

      case 9:
        if (!fullReset) {
          context$1$0.next = 13;
          break;
        }

        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.resetApp(adb, opts));

      case 12:
        return context$1$0.abrupt('return');

      case 13:
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(adb.installOrUpgrade(app, appPackage, {
          grantPermissions: autoGrantPermissions,
          timeout: androidInstallTimeout
        }));

      case 15:
        if (!fastReset) {
          context$1$0.next = 19;
          break;
        }

        _logger2['default'].info('Performing fast reset on \'' + appPackage + '\'');
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(this.resetApp(adb, opts));

      case 19:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.initUnicodeKeyboard = function callee$0$0(adb) {
  var defaultIME, appiumIME;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Enabling Unicode keyboard support');
        _logger2['default'].debug("Pushing unicode ime to device...");
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(adb.install(_appiumAndroidIme.path, { replace: false }));

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(adb.defaultIME());

      case 6:
        defaultIME = context$1$0.sent;

        _logger2['default'].debug('Unsetting previous IME ' + defaultIME);
        appiumIME = 'io.appium.android.ime/.UnicodeIME';

        _logger2['default'].debug('Setting IME to \'' + appiumIME + '\'');
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(adb.enableIME(appiumIME));

      case 12:
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(adb.setIME(appiumIME));

      case 14:
        return context$1$0.abrupt('return', defaultIME);

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.setMockLocationApp = function callee$0$0(adb, app) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(adb.getApiLevel());

      case 3:
        context$1$0.t0 = context$1$0.sent;

        if (!(context$1$0.t0 < 23)) {
          context$1$0.next = 9;
          break;
        }

        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(adb.shell(['settings', 'put', 'secure', 'mock_location', '1']));

      case 7:
        context$1$0.next = 11;
        break;

      case 9:
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(adb.shell(['appops', 'set', app, 'android:mock_location', 'allow']));

      case 11:
        context$1$0.next = 16;
        break;

      case 13:
        context$1$0.prev = 13;
        context$1$0.t1 = context$1$0['catch'](0);

        _logger2['default'].warn('Unable to set mock location for app \'' + app + '\': ' + context$1$0.t1.message);

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 13]]);
};

helpers.installHelperApp = function callee$0$0(adb, apkPath, packageId, appName) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(adb.installOrUpgrade(apkPath, packageId, { grantPermissions: true }));

      case 3:
        context$1$0.next = 8;
        break;

      case 5:
        context$1$0.prev = 5;
        context$1$0.t0 = context$1$0['catch'](0);

        _logger2['default'].warn('Ignored error while installing Appium ' + appName + ' helper: ' + ('\'' + context$1$0.t0.message + '\'. Manually uninstalling the application ') + ('with package id \'' + packageId + '\' may help. Expect some Appium ') + 'features may not work as expected unless this problem is ' + 'fixed.');

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 5]]);
};

helpers.pushSettingsApp = function callee$0$0(adb) {
  var throwError = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug("Pushing settings apk to device...");

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(helpers.installHelperApp(adb, _ioAppiumSettings.path, SETTINGS_HELPER_PKG_ID, 'Settings'));

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(adb.processExists(SETTINGS_HELPER_PKG_ID));

      case 5:
        if (!context$1$0.sent) {
          context$1$0.next = 8;
          break;
        }

        _logger2['default'].debug(SETTINGS_HELPER_PKG_ID + ' is already running. ' + 'There is no need to reset its permissions.');
        return context$1$0.abrupt('return');

      case 8:
        context$1$0.prev = 8;
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(adb.startApp({
          pkg: SETTINGS_HELPER_PKG_ID,
          activity: SETTINGS_HELPER_PKG_ACTIVITY,
          action: "android.intent.action.MAIN",
          category: "android.intent.category.LAUNCHER",
          flags: "0x10200000",
          stopApp: false
        }));

      case 11:
        context$1$0.next = 18;
        break;

      case 13:
        context$1$0.prev = 13;
        context$1$0.t0 = context$1$0['catch'](8);

        _logger2['default'].warn('Failed to launch settings app: ' + context$1$0.t0.message);

        if (!throwError) {
          context$1$0.next = 18;
          break;
        }

        throw context$1$0.t0;

      case 18:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[8, 13]]);
};

helpers.pushUnlock = function callee$0$0(adb) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug("Pushing unlock helper app to device...");

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(helpers.installHelperApp(adb, _appiumUnlock.path, UNLOCK_HELPER_PKG_ID, 'Unlock'));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

// pushStrings method extracts string.xml and converts it to string.json and pushes
// it to /data/local/tmp/string.json on for use of bootstrap
// if app is not present to extract string.xml it deletes remote strings.json
// if app does not have strings.xml we push an empty json object to remote
helpers.pushStrings = function callee$0$0(language, adb, opts) {
  var remotePath, stringsJson, stringsTmpDir, _ref3, apkStrings, localPath, remoteFile;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        remotePath = '/data/local/tmp';
        stringsJson = 'strings.json';
        stringsTmpDir = _path2['default'].resolve(opts.tmpDir, opts.appPackage);
        context$1$0.prev = 3;

        _logger2['default'].debug('Extracting strings from apk', opts.app, language, stringsTmpDir);
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(adb.extractStringsFromApk(opts.app, language, stringsTmpDir));

      case 7:
        _ref3 = context$1$0.sent;
        apkStrings = _ref3.apkStrings;
        localPath = _ref3.localPath;
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(adb.push(localPath, remotePath));

      case 12:
        return context$1$0.abrupt('return', apkStrings);

      case 15:
        context$1$0.prev = 15;
        context$1$0.t0 = context$1$0['catch'](3);
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(opts.app));

      case 19:
        if (context$1$0.sent) {
          context$1$0.next = 24;
          break;
        }

        context$1$0.next = 22;
        return _regeneratorRuntime.awrap(adb.rimraf(remotePath + '/' + stringsJson));

      case 22:
        context$1$0.next = 28;
        break;

      case 24:
        _logger2['default'].warn("Could not get strings, continuing anyway");
        remoteFile = remotePath + '/' + stringsJson;
        context$1$0.next = 28;
        return _regeneratorRuntime.awrap(adb.shell('echo', ['\'{}\' > ' + remoteFile]));

      case 28:
        return context$1$0.abrupt('return', {});

      case 29:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[3, 15]]);
};

helpers.unlockWithUIAutomation = function callee$0$0(driver, adb, unlockCapabilities) {
  var _PIN_UNLOCK$PASSWORD_UNLOCK$PATTERN_UNLOCK$FINGERPRINT_UNLOCK$unlockType;

  var unlockType, unlockKey, unlockMethod;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        unlockType = unlockCapabilities.unlockType;

        if (_unlockHelpers2['default'].isValidUnlockType(unlockType)) {
          context$1$0.next = 3;
          break;
        }

        throw new Error('Invalid unlock type ' + unlockType);

      case 3:
        unlockKey = unlockCapabilities.unlockKey;

        if (_unlockHelpers2['default'].isValidKey(unlockType, unlockKey)) {
          context$1$0.next = 6;
          break;
        }

        throw new Error('Missing unlockKey ' + unlockKey + ' capability for unlockType ' + unlockType);

      case 6:
        unlockMethod = (_PIN_UNLOCK$PASSWORD_UNLOCK$PATTERN_UNLOCK$FINGERPRINT_UNLOCK$unlockType = {}, _defineProperty(_PIN_UNLOCK$PASSWORD_UNLOCK$PATTERN_UNLOCK$FINGERPRINT_UNLOCK$unlockType, _unlockHelpers.PIN_UNLOCK, _unlockHelpers2['default'].pinUnlock), _defineProperty(_PIN_UNLOCK$PASSWORD_UNLOCK$PATTERN_UNLOCK$FINGERPRINT_UNLOCK$unlockType, _unlockHelpers.PASSWORD_UNLOCK, _unlockHelpers2['default'].passwordUnlock), _defineProperty(_PIN_UNLOCK$PASSWORD_UNLOCK$PATTERN_UNLOCK$FINGERPRINT_UNLOCK$unlockType, _unlockHelpers.PATTERN_UNLOCK, _unlockHelpers2['default'].patternUnlock), _defineProperty(_PIN_UNLOCK$PASSWORD_UNLOCK$PATTERN_UNLOCK$FINGERPRINT_UNLOCK$unlockType, _unlockHelpers.FINGERPRINT_UNLOCK, _unlockHelpers2['default'].fingerprintUnlock), _PIN_UNLOCK$PASSWORD_UNLOCK$PATTERN_UNLOCK$FINGERPRINT_UNLOCK$unlockType)[unlockType];
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(unlockMethod(adb, driver, unlockCapabilities));

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.unlockWithHelperApp = function callee$0$0(adb) {
  var startOpts;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].info("Unlocking screen");
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(adb.forceStop(UNLOCK_HELPER_PKG_ID));

      case 3:
        startOpts = {
          pkg: UNLOCK_HELPER_PKG_ID,
          activity: UNLOCK_HELPER_PKG_ACTIVITY,
          action: "android.intent.action.MAIN",
          category: "android.intent.category.LAUNCHER",
          flags: "0x10200000",
          stopApp: false
        };
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(adb.startApp(startOpts));

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(adb.startApp(startOpts));

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.unlock = function callee$0$0(driver, adb, capabilities) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(adb.isScreenLocked());

      case 2:
        if (context$1$0.sent) {
          context$1$0.next = 5;
          break;
        }

        _logger2['default'].info("Screen already unlocked, doing nothing");
        return context$1$0.abrupt('return');

      case 5:
        if (!_lodash2['default'].isUndefined(capabilities.unlockType)) {
          context$1$0.next = 10;
          break;
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(10, 1000, function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                _logger2['default'].debug("Screen is locked, trying to unlock");
                // check if it worked, twice
                _logger2['default'].warn("Using app unlock, this is going to be deprecated!");
                context$2$0.next = 4;
                return _regeneratorRuntime.awrap(helpers.unlockWithHelperApp(adb));

              case 4:
                context$2$0.next = 6;
                return _regeneratorRuntime.awrap(helpers.verifyUnlock(adb));

              case 6:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }));

      case 8:
        context$1$0.next = 14;
        break;

      case 10:
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(helpers.unlockWithUIAutomation(driver, adb, { unlockType: capabilities.unlockType, unlockKey: capabilities.unlockKey }));

      case 12:
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(helpers.verifyUnlock(adb));

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.verifyUnlock = function callee$0$0(adb) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this2 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(2, 1000, function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(adb.isScreenLocked());

              case 2:
                if (!context$2$0.sent) {
                  context$2$0.next = 4;
                  break;
                }

                throw new Error("Screen did not unlock successfully, retrying");

              case 4:
                _logger2['default'].debug("Screen unlocked successfully");

              case 5:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this2);
        }));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.initDevice = function callee$0$0(adb, opts) {
  var defaultIME;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(adb.waitForDevice());

      case 2:
        if (opts.avd) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(helpers.pushSettingsApp(adb));

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(helpers.setMockLocationApp(adb, SETTINGS_HELPER_PKG_ID));

      case 7:
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(helpers.ensureDeviceLocale(adb, opts.language, opts.locale));

      case 9:
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(adb.startLogcat());

      case 11:
        defaultIME = undefined;

        if (!opts.unicodeKeyboard) {
          context$1$0.next = 16;
          break;
        }

        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(helpers.initUnicodeKeyboard(adb));

      case 15:
        defaultIME = context$1$0.sent;

      case 16:
        if (!_lodash2['default'].isUndefined(opts.unlockType)) {
          context$1$0.next = 19;
          break;
        }

        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(helpers.pushUnlock(adb));

      case 19:
        return context$1$0.abrupt('return', defaultIME);

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.removeNullProperties = function (obj) {
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = _getIterator(_lodash2['default'].keys(obj)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var key = _step3.value;

      if (_lodash2['default'].isNull(obj[key]) || _lodash2['default'].isUndefined(obj[key])) {
        delete obj[key];
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3['return']) {
        _iterator3['return']();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }
};

helpers.truncateDecimals = function (number, digits) {
  var multiplier = Math.pow(10, digits),
      adjustedNum = number * multiplier,
      truncatedNum = Math[adjustedNum < 0 ? 'ceil' : 'floor'](adjustedNum);

  return truncatedNum / multiplier;
};

helpers.isChromeBrowser = function (browser) {
  return _lodash2['default'].includes(CHROME_BROWSERS, browser);
};

helpers.getChromePkg = function (browser) {
  var pkg = undefined,
      activity = undefined;

  browser = browser.toLowerCase();
  if (browser === "chromium") {
    pkg = "org.chromium.chrome.shell";
    activity = ".ChromeShellActivity";
  } else if (browser === "chromebeta") {
    pkg = "com.chrome.beta";
    activity = "com.google.android.apps.chrome.Main";
  } else if (browser === "browser") {
    pkg = "com.android.browser";
    activity = "com.android.browser.BrowserActivity";
  } else if (browser === "chromium-browser") {
    pkg = "org.chromium.chrome";
    activity = "com.google.android.apps.chrome.Main";
  } else if (browser === "chromium-webview") {
    pkg = "org.chromium.webview_shell";
    activity = "org.chromium.webview_shell.WebViewBrowserActivity";
  } else {
    pkg = "com.android.chrome";
    activity = "com.google.android.apps.chrome.Main";
  }
  return { pkg: pkg, activity: activity };
};

helpers.bootstrap = _appiumAndroidBootstrap2['default'];
helpers.unlocker = _unlockHelpers2['default'];

exports['default'] = helpers;
exports.CHROME_BROWSERS = CHROME_BROWSERS;

// we can create a throwaway ADB instance here, so there is no dependency
// on instantiating on earlier (at this point, we have no udid)
// we can only use this ADB object for commands that would not be confused
// if multiple devices are connected

// a specific avd name was given. try to initialize with that

// udid was given, lets try to init with that device

// first try started devices/emulators

// direct adb calls to the specific device

// fullReset has priority over fastReset

// executing `shell pm clear` resets previously assigned application permissions as well

// get the default IME so we can return back to it later if we want

// Reinstall will stop the settings helper process anyway, so
// there is no need to continue if the application is still running

// lauch io.appium.settings app due to settings failing to be set
// if the app is not launched prior to start the session on android 7+
// see https://github.com/appium/appium/issues/8957

// delete remote string.json if present

// then start the app twice, as once is flakey

// Leave the old unlock to avoid breaking existing tests

// pushSettingsApp required before calling ensureDeviceLocale for API Level 24+
//# sourceMappingURL=data:application/json;charset=utf8;base64,
