'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _ = require('../../..');

var _2 = _interopRequireDefault(_);

var _libCommandsGeneral = require('../../../lib/commands/general');

var _libAndroidHelpers = require('../../../lib/android-helpers');

var _libAndroidHelpers2 = _interopRequireDefault(_libAndroidHelpers);

var _appiumTestSupport = require('appium-test-support');

var _appiumSupport = require('appium-support');

var _appiumAndroidBootstrap = require('appium-android-bootstrap');

var _appiumAndroidBootstrap2 = _interopRequireDefault(_appiumAndroidBootstrap);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var driver = undefined;
var sandbox = _sinon2['default'].sandbox.create();
var expect = _chai2['default'].expect;

describe('General', function () {
  beforeEach(function () {
    driver = new _2['default']();
    driver.bootstrap = new _appiumAndroidBootstrap2['default']();
    driver.adb = new _appiumAdb2['default']();
    driver.caps = {};
    driver.opts = {};
  });
  afterEach(function () {
    sandbox.restore();
  });
  describe('keys', function () {
    it('should send keys via setText bootstrap command', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.bootstrap, 'sendAction');
            driver.opts.unicodeKeyboard = true;
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.keys('keys'));

          case 4:
            driver.bootstrap.sendAction.calledWithExactly('setText', { text: 'keys', replace: false, unicodeKeyboard: true }).should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should join keys if keys is array', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.bootstrap, 'sendAction');
            driver.opts.unicodeKeyboard = false;
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.keys(['k', 'e', 'y', 's']));

          case 4:
            driver.bootstrap.sendAction.calledWithExactly('setText', { text: 'keys', replace: false }).should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getDeviceTime', function () {
    it('should return device time', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'shell');
            driver.adb.shell.returns(' 11:12 ');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.getDeviceTime().should.become('11:12'));

          case 4:
            driver.adb.shell.calledWithExactly(['date']).should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should thorws error if shell command failed', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'shell').throws();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getDeviceTime().should.be.rejectedWith('Could not capture'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getPageSource', function () {
    it('should return page source', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.bootstrap, 'sendAction').withArgs('source').returns('sources');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getPageSource());

          case 3:
            context$3$0.sent.should.be.equal('sources');

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('back', function () {
    it('should press back', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.bootstrap, 'sendAction');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.back());

          case 3:
            driver.bootstrap.sendAction.calledWithExactly('pressBack').should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('isKeyboardShown', function () {
    it('should return true if the keyboard is shown', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.isSoftKeyboardPresent = function () {
              return { isKeyboardShown: true, canCloseKeyboard: true };
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.isKeyboardShown());

          case 3:
            context$3$0.sent.should.equal(true);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return false if the keyboard is not shown', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.isSoftKeyboardPresent = function () {
              return { isKeyboardShown: false, canCloseKeyboard: true };
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.isKeyboardShown());

          case 3:
            context$3$0.sent.should.equal(false);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('hideKeyboard', function () {
    it('should hide keyboard via back command', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'back');
            driver.adb.isSoftKeyboardPresent = function () {
              return { isKeyboardShown: true, canCloseKeyboard: true };
            };
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.hideKeyboard());

          case 4:
            driver.back.calledOnce.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not call back command if can\'t close keyboard', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'back');
            driver.adb.isSoftKeyboardPresent = function () {
              return { isKeyboardShown: true, canCloseKeyboard: false };
            };
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.hideKeyboard());

          case 4:
            driver.back.notCalled.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw an error if no keyboard is present', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.isSoftKeyboardPresent = function () {
              return false;
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.hideKeyboard().should.be.rejectedWith(/not present/));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('openSettingsActivity', function () {
    it('should open settings activity', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'getFocusedPackageAndActivity').returns({ appPackage: 'pkg', appActivity: 'act' });
            sandbox.stub(driver.adb, 'shell');
            sandbox.stub(driver.adb, 'waitForNotActivity');
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.openSettingsActivity('set1'));

          case 5:
            driver.adb.shell.calledWithExactly(['am', 'start', '-a', 'android.settings.set1']).should.be['true'];
            driver.adb.waitForNotActivity.calledWithExactly('pkg', 'act', 5000).should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getWindowSize', function () {
    it('should get window size', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.bootstrap, 'sendAction').withArgs('getDeviceSize').returns('size');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getWindowSize());

          case 3:
            context$3$0.sent.should.be.equal('size');

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getWindowRect', function () {
    it('should get window size', function callee$2$0() {
      var rect;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.bootstrap, 'sendAction').withArgs('getDeviceSize').returns({ width: 300, height: 400 });
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getWindowRect());

          case 3:
            rect = context$3$0.sent;

            rect.width.should.be.equal(300);
            rect.height.should.be.equal(400);
            rect.x.should.be.equal(0);
            rect.y.should.be.equal(0);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getCurrentActivity', function () {
    it('should get current activity', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'getFocusedPackageAndActivity').returns({ appActivity: 'act' });
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getCurrentActivity().should.eventually.be.equal('act'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getCurrentPackage', function () {
    it('should get current activity', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'getFocusedPackageAndActivity').returns({ appPackage: 'pkg' });
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getCurrentPackage().should.eventually.equal('pkg'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getLogTypes', function () {
    it('should get log types', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.getLogTypes());

          case 2:
            context$3$0.t0 = ['logcat'];
            context$3$0.sent.should.be.deep.equal(context$3$0.t0);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getLog', function () {
    it('should get log types', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'getLogcatLogs').returns('logs');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getLog('logcat'));

          case 3:
            context$3$0.sent.should.be.equal('logs');

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throws exception if log type is unsupported', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.getLog('unsupported_type').should.eventually.be.rejectedWith(/Unsupported log type unsupported_type/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('isAppInstalled', function () {
    it('should return true if app is installed', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'isAppInstalled').withArgs('pkg').returns(true);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.isAppInstalled('pkg'));

          case 3:
            context$3$0.sent.should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('removeApp', function () {
    it('should remove app', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'uninstallApk').withArgs('pkg').returns(true);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.removeApp('pkg'));

          case 3:
            context$3$0.sent.should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('installApp', function () {
    it('should install app', function callee$2$0() {
      var app;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            app = 'app.apk';

            sandbox.stub(driver.helpers, 'configureApp').withArgs('app', '.apk').returns(app);
            sandbox.stub(_appiumSupport.fs, 'exists').withArgs(app).returns(true);
            sandbox.stub(driver.adb, 'install').returns(true);
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(driver.installApp('app'));

          case 6:
            driver.helpers.configureApp.calledOnce.should.be['true'];
            _appiumSupport.fs.exists.calledOnce.should.be['true'];
            driver.adb.install.calledOnce.should.be['true'];

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw an error if APK does not exist', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.installApp('non/existent/app.apk').should.be.rejectedWith(/does not exist or is not accessible/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('background', function () {
    it('should bring app to background and back', function callee$2$0() {
      var appPackage, appActivity, params;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            appPackage = 'wpkg';
            appActivity = 'wacv';

            driver.opts = { appPackage: appPackage, appActivity: appActivity, intentAction: 'act',
              intentCategory: 'cat', intentFlags: 'flgs',
              optionalIntentArguments: 'opt' };
            params = { pkg: appPackage, activity: appActivity, action: 'act', category: 'cat',
              flags: 'flgs',
              optionalIntentArguments: 'opt', stopApp: false };

            sandbox.stub(driver.adb, 'goToHome');
            sandbox.stub(driver.adb, 'getFocusedPackageAndActivity').returns({ appPackage: appPackage, appActivity: appActivity });
            sandbox.stub(_bluebird2['default'], 'delay');
            sandbox.stub(driver.adb, 'startApp');
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(driver.background(10));

          case 10:
            driver.adb.getFocusedPackageAndActivity.calledOnce.should.be['true'];
            driver.adb.goToHome.calledOnce.should.be['true'];
            _bluebird2['default'].delay.calledWithExactly(10000).should.be['true'];
            driver.adb.startApp.calledWithExactly(params).should.be['true'];

          case 14:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should bring app to background and back if started after session init', function callee$2$0() {
      var appPackage, appActivity, params;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            appPackage = 'newpkg';
            appActivity = 'newacv';

            driver.opts = { appPackage: 'pkg', appActivity: 'acv', intentAction: 'act',
              intentCategory: 'cat', intentFlags: 'flgs',
              optionalIntentArguments: 'opt' };
            params = { pkg: appPackage, activity: appActivity, action: 'act', category: 'cat',
              flags: 'flgs', waitPkg: 'wpkg', waitActivity: 'wacv',
              optionalIntentArguments: 'opt', stopApp: false };

            driver.opts.startActivityArgs = _defineProperty({}, appPackage + '/' + appActivity, params);
            sandbox.stub(driver.adb, 'goToHome');
            sandbox.stub(driver.adb, 'getFocusedPackageAndActivity').returns({ appPackage: appPackage, appActivity: appActivity });
            sandbox.stub(_bluebird2['default'], 'delay');
            sandbox.stub(driver.adb, 'startApp');
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(driver.background(10));

          case 11:
            driver.adb.getFocusedPackageAndActivity.calledOnce.should.be['true'];
            driver.adb.goToHome.calledOnce.should.be['true'];
            _bluebird2['default'].delay.calledWithExactly(10000).should.be['true'];
            driver.adb.startApp.calledWithExactly(params).should.be['true'];

          case 15:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not bring app back if seconds are negative', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'goToHome');
            sandbox.stub(driver.adb, 'startApp');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.background(-1));

          case 4:
            driver.adb.goToHome.calledOnce.should.be['true'];
            driver.adb.startApp.notCalled.should.be['true'];

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getStrings', (0, _appiumTestSupport.withMocks)({ helpers: _libAndroidHelpers2['default'] }, function (mocks) {
    it('should return app strings', function callee$2$0() {
      var strings;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.bootstrap.sendAction = function () {
              return '';
            };
            mocks.helpers.expects("pushStrings").returns({ test: 'en_value' });
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.getStrings('en'));

          case 4:
            strings = context$3$0.sent;

            strings.test.should.equal('en_value');
            mocks.helpers.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return cached app strings for the specified language', function callee$2$0() {
      var strings;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.getDeviceLanguage = function () {
              return 'en';
            };
            driver.apkStrings.en = { test: 'en_value' };
            driver.apkStrings.fr = { test: 'fr_value' };
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.getStrings('fr'));

          case 5:
            strings = context$3$0.sent;

            strings.test.should.equal('fr_value');

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return cached app strings for the device language', function callee$2$0() {
      var strings;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.getDeviceLanguage = function () {
              return 'en';
            };
            driver.apkStrings.en = { test: 'en_value' };
            driver.apkStrings.fr = { test: 'fr_value' };
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.getStrings());

          case 5:
            strings = context$3$0.sent;

            strings.test.should.equal('en_value');

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
  describe('launchApp', function () {
    it('should init and start app', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'initAUT');
            sandbox.stub(driver, 'startAUT');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.launchApp());

          case 4:
            driver.initAUT.calledOnce.should.be['true'];
            driver.startAUT.calledOnce.should.be['true'];

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('startActivity', function () {
    var params = undefined;
    beforeEach(function () {
      params = { pkg: 'pkg', activity: 'act', waitPkg: 'wpkg', waitActivity: 'wact',
        action: 'act', category: 'cat', flags: 'flgs', optionalIntentArguments: 'opt' };
      sandbox.stub(driver.adb, 'startApp');
    });
    it('should start activity', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            params.optionalIntentArguments = 'opt';
            params.stopApp = false;
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.startActivity('pkg', 'act', 'wpkg', 'wact', 'act', 'cat', 'flgs', 'opt', true));

          case 4:
            driver.adb.startApp.calledWithExactly(params).should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should use dontStopAppOnReset from opts if it is not passed as param', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.opts.dontStopAppOnReset = true;
            params.stopApp = false;
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.startActivity('pkg', 'act', 'wpkg', 'wact', 'act', 'cat', 'flgs', 'opt'));

          case 4:
            driver.adb.startApp.calledWithExactly(params).should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should use appPackage and appActivity if appWaitPackage and appWaitActivity are undefined', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            params.waitPkg = 'pkg';
            params.waitActivity = 'act';
            params.stopApp = true;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.startActivity('pkg', 'act', null, null, 'act', 'cat', 'flgs', 'opt', false));

          case 5:
            driver.adb.startApp.calledWithExactly(params).should.be['true'];

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('reset', function () {
    it('should reset app via reinstall if fullReset is true', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.opts.fullReset = true;
            driver.opts.appPackage = 'pkg';
            sandbox.stub(driver, 'startAUT').returns('aut');
            sandbox.stub(_libAndroidHelpers2['default'], 'resetApp').returns(undefined);
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(driver.reset().should.eventually.be.equal('aut'));

          case 6:
            _libAndroidHelpers2['default'].resetApp.calledWith(driver.adb).should.be['true'];
            driver.startAUT.calledOnce.should.be['true'];

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should do fast reset if fullReset is false', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.opts.fullReset = false;
            driver.opts.appPackage = 'pkg';
            sandbox.stub(_libAndroidHelpers2['default'], 'resetApp').returns(undefined);
            sandbox.stub(driver, 'startAUT').returns('aut');
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(driver.reset().should.eventually.be.equal('aut'));

          case 6:
            _libAndroidHelpers2['default'].resetApp.calledWith(driver.adb).should.be['true'];
            driver.startAUT.calledOnce.should.be['true'];
            expect(driver.curContext).to.eql('NATIVE_APP');

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('startAUT', function () {
    it('should start AUT', function callee$2$0() {
      var params;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.opts = { appPackage: 'pkg', appActivity: 'act', intentAction: 'actn',
              intentCategory: 'cat', intentFlags: 'flgs', appWaitPackage: 'wpkg',
              appWaitActivity: 'wact', appWaitDuration: 'wdur',
              optionalIntentArguments: 'opt' };
            params = { pkg: 'pkg', activity: 'act', action: 'actn', category: 'cat',
              flags: 'flgs', waitPkg: 'wpkg', waitActivity: 'wact',
              waitDuration: 'wdur', optionalIntentArguments: 'opt', stopApp: false };

            driver.opts.dontStopAppOnReset = true;
            params.stopApp = false;
            sandbox.stub(driver.adb, 'startApp');
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(driver.startAUT());

          case 7:
            driver.adb.startApp.calledWithExactly(params).should.be['true'];

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('setUrl', function () {
    it('should set url', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.opts = { appPackage: 'pkg' };
            sandbox.stub(driver.adb, 'startUri');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.setUrl('url'));

          case 4:
            driver.adb.startUri.calledWithExactly('url', 'pkg').should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('closeApp', function () {
    it('should close app', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.opts = { appPackage: 'pkg' };
            sandbox.stub(driver.adb, 'forceStop');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.closeApp());

          case 4:
            driver.adb.forceStop.calledWithExactly('pkg').should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getDisplayDensity', function () {
    it('should return the display density of a device', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.shell = function () {
              return '123';
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getDisplayDensity());

          case 3:
            context$3$0.sent.should.equal(123);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return the display density of an emulator', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.shell = function (cmd) {
              var joinedCmd = cmd.join(' ');
              if (joinedCmd.indexOf('ro.sf') !== -1) {
                // device property look up
                return '';
              } else if (joinedCmd.indexOf('qemu.sf') !== -1) {
                // emulator property look up
                return '456';
              }
              return '';
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getDisplayDensity());

          case 3:
            context$3$0.sent.should.equal(456);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw an error if the display density property can\'t be found', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.shell = function () {
              return '';
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getDisplayDensity().should.be.rejectedWith(/Failed to get display density property/));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw and error if the display density is not a number', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.shell = function () {
              return 'abc';
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getDisplayDensity().should.be.rejectedWith(/Failed to get display density property/));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('parseSurfaceLine', function () {
    it('should return visible true if the surface is visible', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            (0, _libCommandsGeneral.parseSurfaceLine)('shown=true rect=1 1 1 1').should.be.eql({
              visible: true,
              x: 1,
              y: 1,
              width: 1,
              height: 1
            });

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return visible false if the surface is not visible', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            (0, _libCommandsGeneral.parseSurfaceLine)('shown=false rect=1 1 1 1').should.be.eql({
              visible: false,
              x: 1,
              y: 1,
              width: 1,
              height: 1
            });

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return the parsed surface bounds', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            (0, _libCommandsGeneral.parseSurfaceLine)('shown=true rect=(1.0,2.0) 3.0 x 4.0').should.be.eql({
              visible: true,
              x: 1,
              y: 2,
              width: 3,
              height: 4
            });

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  // these are used for both parseWindows and getSystemBars tests
  var validWindowOutput = ['  Window #1 Derp', '    stuff', '      Surface: derp shown=false lalalala rect=(9.0,8.0) 7.0 x 6.0', '    more stuff', '  Window #2 StatusBar', '    blah blah blah', '      Surface: blah blah shown=true blah blah rect=(1.0,2.0) 3.0 x 4.0', '    blah blah blah', '  Window #3 NavigationBar', '    womp womp', '      Surface: blah blah shown=false womp womp rect=(5.0,6.0) 50.0 x 60.0', '    qwerty asd zxc'].join('\n');
  var validSystemBars = {
    statusBar: { visible: true, x: 1, y: 2, width: 3, height: 4 },
    navigationBar: { visible: false, x: 5, y: 6, width: 50, height: 60 }
  };

  describe('parseWindows', function () {
    it('should throw an error if the status bar info wasn\'t found', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            expect(function () {
              (0, _libCommandsGeneral.parseWindows)('');
            }).to['throw'](Error, /Failed to parse status bar information./);

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw an error if the navigation bar info wasn\'t found', function callee$2$0() {
      var windowOutput;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            windowOutput = ['  Window #1 StatusBar', '    blah blah blah', '      Surface: blah blah shown=true blah blah rect=(1.0,2.0) 3.0 x 4.0', '    blah blah blah'].join('\n');

            expect(function () {
              (0, _libCommandsGeneral.parseWindows)(windowOutput);
            }).to['throw'](Error, /Failed to parse navigation bar information./);

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return status and navigation bar info when both are given', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            (0, _libCommandsGeneral.parseWindows)(validWindowOutput).should.be.eql(validSystemBars);

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getSystemBars', function () {
    it('should throw an error if there\'s no window manager output', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver = new _2['default']();
            driver.adb = {};
            driver.adb.shell = function () {
              return '';
            };
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.getSystemBars().should.be.rejectedWith(/Did not get window manager output./));

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return the parsed system bar info', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver = new _2['default']();
            driver.adb = {};
            driver.adb.shell = function () {
              return validWindowOutput;
            };
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.getSystemBars());

          case 5:
            context$3$0.t0 = validSystemBars;
            context$3$0.sent.should.be.eql(context$3$0.t0);

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
