'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _desired = require('../desired');

var _helpersSession = require('../helpers/session');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('apidemo - touch', function () {
  describe('multi-actions', function () {
    var _this = this;

    var driver = undefined;
    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(_Object$assign({}, _desired.APIDEMOS_CAPS, {
              appPackage: 'io.appium.android.apis',
              appActivity: '.view.SplitTouchView'
            })));

          case 2:
            driver = context$3$0.sent;

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.deleteSession());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should scroll two different lists', function callee$2$0() {
      var lists, leftList, rightList, leftGestures, rightGestures;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.findElOrEls('class name', 'android.widget.ListView', true));

          case 2:
            lists = context$3$0.sent;

            lists.length.should.be.at.least(2);

            leftList = lists[0].ELEMENT;
            rightList = lists[1].ELEMENT;
            leftGestures = [{ action: 'press', options: { element: leftList } }, { action: 'moveTo', options: { element: leftList, x: 10, y: 0 } }, { action: 'moveTo', options: { element: leftList, x: 10, y: -75 } }, { action: 'moveTo', options: { element: leftList, x: 10, y: -150 } }];
            rightGestures = [{ action: 'press', options: { element: rightList } }, { action: 'moveTo', options: { element: rightList, x: 10, y: 0 } }, { action: 'moveTo', options: { element: rightList, x: 10, y: -75 } }, { action: 'moveTo', options: { element: rightList, x: 10, y: -150 } }];
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(driver.performMultiAction([leftGestures, rightGestures]));

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('swipe-action', function () {
    var _this2 = this;

    var driver = undefined;
    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(_Object$assign({}, _desired.APIDEMOS_CAPS, {
              appPackage: 'io.appium.android.apis',
              appActivity: '.view.List1'
            })));

          case 2:
            driver = context$3$0.sent;

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.deleteSession());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });

    function assertElement(driver) {
      var present = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
      var els;
      return _regeneratorRuntime.async(function assertElement$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.findElOrEls('xpath', "//*[@text='Abertam']", true));

          case 2:
            els = context$3$0.sent;

            els.should.be.an['instanceof'](Array);
            els.should.have.length(present ? 1 : 0);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    }

    it('should swipe', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(assertElement(driver, true));

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.swipe(100, 650, 100, 330, 1));

          case 4:
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(assertElement(driver, false));

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9jb21tYW5kcy90b3VjaC1hY3Rpb24tZTJlLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O29CQUFpQixNQUFNOzs7OzhCQUNJLGtCQUFrQjs7Ozt1QkFDZixZQUFZOzs4QkFDZixvQkFBb0I7O0FBRy9DLGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQ2Qsa0JBQUssR0FBRyw2QkFBZ0IsQ0FBQzs7QUFFekIsUUFBUSxDQUFDLGlCQUFpQixFQUFFLFlBQVk7QUFDdEMsVUFBUSxDQUFDLGVBQWUsRUFBRSxZQUFZOzs7QUFDcEMsUUFBSSxNQUFNLFlBQUEsQ0FBQztBQUNYLFVBQU0sQ0FBQzs7Ozs7NkNBQ1UsZ0NBQVcsZUFBYyxFQUFFLDBCQUFpQjtBQUN6RCx3QkFBVSxFQUFFLHdCQUF3QjtBQUNwQyx5QkFBVyxFQUFFLHNCQUFzQjthQUNwQyxDQUFDLENBQUM7OztBQUhILGtCQUFNOzs7Ozs7O0tBSVAsQ0FBQyxDQUFDO0FBQ0gsU0FBSyxDQUFDOzs7Ozs2Q0FDRSxNQUFNLENBQUMsYUFBYSxFQUFFOzs7Ozs7O0tBQzdCLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsbUNBQW1DLEVBQUU7VUFDbEMsS0FBSyxFQUdMLFFBQVEsRUFDUixTQUFTLEVBRVQsWUFBWSxFQU1aLGFBQWE7Ozs7OzZDQVpDLE1BQU0sQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLHlCQUF5QixFQUFFLElBQUksQ0FBQzs7O0FBQS9FLGlCQUFLOztBQUNULGlCQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFL0Isb0JBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTztBQUMzQixxQkFBUyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPO0FBRTVCLHdCQUFZLEdBQUcsQ0FDakIsRUFBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUMsRUFBQyxFQUMvQyxFQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxFQUM3RCxFQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBQyxFQUFDLEVBQy9ELEVBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsRUFBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFDLEVBQUMsQ0FDakU7QUFDRyx5QkFBYSxHQUFHLENBQ2xCLEVBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBQyxPQUFPLEVBQUUsU0FBUyxFQUFDLEVBQUMsRUFDaEQsRUFBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxFQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFDOUQsRUFBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxFQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUMsRUFBQyxFQUNoRSxFQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEVBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBQyxFQUFDLENBQ2xFOzs2Q0FDSyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxZQUFZLEVBQUUsYUFBYSxDQUFDLENBQUM7Ozs7Ozs7S0FDL0QsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDOztBQUVILFVBQVEsQ0FBQyxjQUFjLEVBQUUsWUFBWTs7O0FBQ25DLFFBQUksTUFBTSxZQUFBLENBQUM7QUFDWCxVQUFNLENBQUM7Ozs7OzZDQUNVLGdDQUFXLGVBQWMsRUFBRSwwQkFBaUI7QUFDekQsd0JBQVUsRUFBRSx3QkFBd0I7QUFDcEMseUJBQVcsRUFBRSxhQUFhO2FBQzNCLENBQUMsQ0FBQzs7O0FBSEgsa0JBQU07Ozs7Ozs7S0FJUCxDQUFDLENBQUM7QUFDSCxTQUFLLENBQUM7Ozs7OzZDQUNFLE1BQU0sQ0FBQyxhQUFhLEVBQUU7Ozs7Ozs7S0FDN0IsQ0FBQyxDQUFDOztBQUVILGFBQWUsYUFBYSxDQUFFLE1BQU07VUFBRSxPQUFPLHlEQUFHLElBQUk7VUFDOUMsR0FBRzs7Ozs7NkNBQVMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsSUFBSSxDQUFDOzs7QUFBckUsZUFBRzs7QUFDUCxlQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLGNBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNuQyxlQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzs7Ozs7OztLQUN6Qzs7QUFFRCxNQUFFLENBQUMsY0FBYyxFQUFFOzs7Ozs2Q0FDWCxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQzs7Ozs2Q0FDM0IsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDOzs7OzZDQUNuQyxhQUFhLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQzs7Ozs7OztLQUNuQyxDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9mdW5jdGlvbmFsL2NvbW1hbmRzL3RvdWNoLWFjdGlvbi1lMmUtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCB7IEFQSURFTU9TX0NBUFMgfSBmcm9tICcuLi9kZXNpcmVkJztcbmltcG9ydCB7IGluaXREcml2ZXIgfSBmcm9tICcuLi9oZWxwZXJzL3Nlc3Npb24nO1xuXG5cbmNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmRlc2NyaWJlKCdhcGlkZW1vIC0gdG91Y2gnLCBmdW5jdGlvbiAoKSB7XG4gIGRlc2NyaWJlKCdtdWx0aS1hY3Rpb25zJywgZnVuY3Rpb24gKCkge1xuICAgIGxldCBkcml2ZXI7XG4gICAgYmVmb3JlKGFzeW5jICgpID0+IHtcbiAgICAgIGRyaXZlciA9IGF3YWl0IGluaXREcml2ZXIoT2JqZWN0LmFzc2lnbih7fSwgQVBJREVNT1NfQ0FQUywge1xuICAgICAgICBhcHBQYWNrYWdlOiAnaW8uYXBwaXVtLmFuZHJvaWQuYXBpcycsXG4gICAgICAgIGFwcEFjdGl2aXR5OiAnLnZpZXcuU3BsaXRUb3VjaFZpZXcnLFxuICAgICAgfSkpO1xuICAgIH0pO1xuICAgIGFmdGVyKGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IGRyaXZlci5kZWxldGVTZXNzaW9uKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHNjcm9sbCB0d28gZGlmZmVyZW50IGxpc3RzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IGxpc3RzID0gYXdhaXQgZHJpdmVyLmZpbmRFbE9yRWxzKCdjbGFzcyBuYW1lJywgJ2FuZHJvaWQud2lkZ2V0Lkxpc3RWaWV3JywgdHJ1ZSk7XG4gICAgICBsaXN0cy5sZW5ndGguc2hvdWxkLmJlLmF0LmxlYXN0KDIpO1xuXG4gICAgICBsZXQgbGVmdExpc3QgPSBsaXN0c1swXS5FTEVNRU5UO1xuICAgICAgbGV0IHJpZ2h0TGlzdCA9IGxpc3RzWzFdLkVMRU1FTlQ7XG5cbiAgICAgIGxldCBsZWZ0R2VzdHVyZXMgPSBbXG4gICAgICAgIHthY3Rpb246ICdwcmVzcycsIG9wdGlvbnM6IHtlbGVtZW50OiBsZWZ0TGlzdH19LFxuICAgICAgICB7YWN0aW9uOiAnbW92ZVRvJywgb3B0aW9uczoge2VsZW1lbnQ6IGxlZnRMaXN0LCB4OiAxMCwgeTogMH19LFxuICAgICAgICB7YWN0aW9uOiAnbW92ZVRvJywgb3B0aW9uczoge2VsZW1lbnQ6IGxlZnRMaXN0LCB4OiAxMCwgeTogLTc1fX0sXG4gICAgICAgIHthY3Rpb246ICdtb3ZlVG8nLCBvcHRpb25zOiB7ZWxlbWVudDogbGVmdExpc3QsIHg6IDEwLCB5OiAtMTUwfX1cbiAgICAgIF07XG4gICAgICBsZXQgcmlnaHRHZXN0dXJlcyA9IFtcbiAgICAgICAge2FjdGlvbjogJ3ByZXNzJywgb3B0aW9uczoge2VsZW1lbnQ6IHJpZ2h0TGlzdH19LFxuICAgICAgICB7YWN0aW9uOiAnbW92ZVRvJywgb3B0aW9uczoge2VsZW1lbnQ6IHJpZ2h0TGlzdCwgeDogMTAsIHk6IDB9fSxcbiAgICAgICAge2FjdGlvbjogJ21vdmVUbycsIG9wdGlvbnM6IHtlbGVtZW50OiByaWdodExpc3QsIHg6IDEwLCB5OiAtNzV9fSxcbiAgICAgICAge2FjdGlvbjogJ21vdmVUbycsIG9wdGlvbnM6IHtlbGVtZW50OiByaWdodExpc3QsIHg6IDEwLCB5OiAtMTUwfX1cbiAgICAgIF07XG4gICAgICBhd2FpdCBkcml2ZXIucGVyZm9ybU11bHRpQWN0aW9uKFtsZWZ0R2VzdHVyZXMsIHJpZ2h0R2VzdHVyZXNdKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3N3aXBlLWFjdGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZHJpdmVyO1xuICAgIGJlZm9yZShhc3luYyAoKSA9PiB7XG4gICAgICBkcml2ZXIgPSBhd2FpdCBpbml0RHJpdmVyKE9iamVjdC5hc3NpZ24oe30sIEFQSURFTU9TX0NBUFMsIHtcbiAgICAgICAgYXBwUGFja2FnZTogJ2lvLmFwcGl1bS5hbmRyb2lkLmFwaXMnLFxuICAgICAgICBhcHBBY3Rpdml0eTogJy52aWV3Lkxpc3QxJyxcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgICBhZnRlcihhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBkcml2ZXIuZGVsZXRlU2Vzc2lvbigpO1xuICAgIH0pO1xuXG4gICAgYXN5bmMgZnVuY3Rpb24gYXNzZXJ0RWxlbWVudCAoZHJpdmVyLCBwcmVzZW50ID0gdHJ1ZSkge1xuICAgICAgbGV0IGVscyA9IGF3YWl0IGRyaXZlci5maW5kRWxPckVscygneHBhdGgnLCBcIi8vKltAdGV4dD0nQWJlcnRhbSddXCIsIHRydWUpO1xuICAgICAgZWxzLnNob3VsZC5iZS5hbi5pbnN0YW5jZW9mKEFycmF5KTtcbiAgICAgIGVscy5zaG91bGQuaGF2ZS5sZW5ndGgocHJlc2VudCA/IDEgOiAwKTtcbiAgICB9XG5cbiAgICBpdCgnc2hvdWxkIHN3aXBlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgYXNzZXJ0RWxlbWVudChkcml2ZXIsIHRydWUpO1xuICAgICAgYXdhaXQgZHJpdmVyLnN3aXBlKDEwMCwgNjUwLCAxMDAsIDMzMCwgMSk7XG4gICAgICBhd2FpdCBhc3NlcnRFbGVtZW50KGRyaXZlciwgZmFsc2UpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
