'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _teen_process = require('teen_process');

var _appiumBaseDriver = require('appium-base-driver');

var _asyncbox = require('asyncbox');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _installer = require('./installer');

var _adbkit = require('adbkit');

var _adbkit2 = _interopRequireDefault(_adbkit);

var _utils = require('./utils');

var REQD_PARAMS = ['adb', 'tmpDir', 'host', 'systemPort', 'devicePort'];
var SERVER_LAUNCH_RETRIES = 20;
var SERVER_INSTALL_RETRIES = 20;
var INSTRUMENTATION_TARGET = 'io.appium.uiautomator2.server.test/android.support.test.runner.AndroidJUnitRunner';

var UiAutomator2Server = (function () {
  function UiAutomator2Server() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, UiAutomator2Server);

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _getIterator(REQD_PARAMS), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var req = _step.value;

        if (!opts || !opts[req]) {
          throw new Error('Option \'' + req + '\' is required!');
        }
        this[req] = opts[req];
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    this.jwproxy = new _appiumBaseDriver.JWProxy({ host: this.host, port: this.systemPort });
    this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);

    this.client = _adbkit2['default'].createClient({
      port: this.adb.adbPort
    });
  }

  _createClass(UiAutomator2Server, [{
    key: 'installServerApk',
    value: function installServerApk(installRetries) {
      var apkPackage, testApkPackage, isApkInstalled, isTestApkInstalled, apkVersion, pkgVersion, retries, output, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, line;

      return _regeneratorRuntime.async(function installServerApk$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getPackageName(_installer.UI2_SERVER_APK_PATH));

          case 2:
            apkPackage = context$2$0.sent;
            testApkPackage = apkPackage + '.test';
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.adb.isAppInstalled(apkPackage));

          case 6:
            isApkInstalled = context$2$0.sent;
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.adb.isAppInstalled(testApkPackage));

          case 9:
            isTestApkInstalled = context$2$0.sent;

            if (!(isApkInstalled || isTestApkInstalled)) {
              context$2$0.next = 22;
              break;
            }

            context$2$0.next = 13;
            return _regeneratorRuntime.awrap(this.getAPKVersion(_installer.UI2_SERVER_APK_PATH));

          case 13:
            apkVersion = context$2$0.sent;
            context$2$0.next = 16;
            return _regeneratorRuntime.awrap(this.getInstalledPackageVersion(apkPackage));

          case 16:
            pkgVersion = context$2$0.sent;

            if (!(apkVersion !== pkgVersion)) {
              context$2$0.next = 22;
              break;
            }

            _logger2['default'].debug('Server installed but version ' + pkgVersion + ' instead of ' + apkVersion + '. Re-installing');
            isApkInstalled = isTestApkInstalled = false;
            context$2$0.next = 22;
            return _regeneratorRuntime.awrap(this.uninstallServerAndTest(apkPackage, testApkPackage));

          case 22:
            if (isApkInstalled) {
              context$2$0.next = 25;
              break;
            }

            context$2$0.next = 25;
            return _regeneratorRuntime.awrap(this.signAndInstall(_installer.UI2_SERVER_APK_PATH, apkPackage));

          case 25:
            if (isTestApkInstalled) {
              context$2$0.next = 28;
              break;
            }

            context$2$0.next = 28;
            return _regeneratorRuntime.awrap(this.signAndInstall(_installer.UI2_TEST_APK_PATH, testApkPackage, true));

          case 28:
            retries = (0, _utils.getRetries)('Server install', installRetries, SERVER_INSTALL_RETRIES);

            _logger2['default'].debug('Waiting up to ' + retries * 1000 + 'ms for instrumentation \'' + INSTRUMENTATION_TARGET + '\' to be available');
            output = undefined;
            context$2$0.prev = 31;
            context$2$0.next = 34;
            return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(retries, 1000, function callee$2$0() {
              var err;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.next = 2;
                    return _regeneratorRuntime.awrap(this.adb.shell(['pm', 'list', 'instrumentation']));

                  case 2:
                    output = context$3$0.sent;

                    if (!(output.indexOf('Could not access the Package Manager') !== -1)) {
                      context$3$0.next = 9;
                      break;
                    }

                    err = new Error('Problem running package manager: ' + output);

                    output = null; // remove output, so it is not printed below
                    throw err;

                  case 9:
                    if (!(output.indexOf(INSTRUMENTATION_TARGET) === -1)) {
                      context$3$0.next = 11;
                      break;
                    }

                    throw new Error('No instrumentation process found. Retrying...');

                  case 11:
                    _logger2['default'].debug('Instrumentation \'' + INSTRUMENTATION_TARGET + '\' available');

                  case 12:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this);
            }));

          case 34:
            context$2$0.next = 60;
            break;

          case 36:
            context$2$0.prev = 36;
            context$2$0.t0 = context$2$0['catch'](31);

            _logger2['default'].error('Unable to find instrumentation target \'' + INSTRUMENTATION_TARGET + '\': ' + context$2$0.t0.message);

            if (!output) {
              context$2$0.next = 60;
              break;
            }

            _logger2['default'].debug('Available targets:');
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            context$2$0.prev = 44;
            for (_iterator2 = _getIterator(output.split('\n')); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              line = _step2.value;

              _logger2['default'].debug('    ' + line.replace('instrumentation:', ''));
            }
            context$2$0.next = 52;
            break;

          case 48:
            context$2$0.prev = 48;
            context$2$0.t1 = context$2$0['catch'](44);
            _didIteratorError2 = true;
            _iteratorError2 = context$2$0.t1;

          case 52:
            context$2$0.prev = 52;
            context$2$0.prev = 53;

            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
              _iterator2['return']();
            }

          case 55:
            context$2$0.prev = 55;

            if (!_didIteratorError2) {
              context$2$0.next = 58;
              break;
            }

            throw _iteratorError2;

          case 58:
            return context$2$0.finish(55);

          case 59:
            return context$2$0.finish(52);

          case 60:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[31, 36], [44, 48, 52, 60], [53,, 55, 59]]);
    }
  }, {
    key: 'uninstallServerAndTest',
    value: function uninstallServerAndTest(apkPackage, testApkPackage) {
      return _regeneratorRuntime.async(function uninstallServerAndTest$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.adb.uninstallApk(apkPackage));

          case 3:
            context$2$0.next = 9;
            break;

          case 5:
            context$2$0.prev = 5;
            context$2$0.t0 = context$2$0['catch'](0);

            _logger2['default'].warn('Error uninstalling \'' + apkPackage + '\': ' + context$2$0.t0.message);
            _logger2['default'].debug('Continuing');

          case 9:
            context$2$0.prev = 9;
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(this.adb.uninstallApk(testApkPackage));

          case 12:
            context$2$0.next = 18;
            break;

          case 14:
            context$2$0.prev = 14;
            context$2$0.t1 = context$2$0['catch'](9);

            _logger2['default'].warn('Error uninstalling \'' + testApkPackage + '\': ' + context$2$0.t1.message);
            _logger2['default'].debug('Continuing');

          case 18:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 5], [9, 14]]);
    }
  }, {
    key: 'signAndInstall',
    value: function signAndInstall(apk, apkPackage) {
      var test = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
      return _regeneratorRuntime.async(function signAndInstall$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.checkAndSignCert(apk, apkPackage));

          case 2:
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.adb.install(apk));

          case 4:
            _logger2['default'].info('Installed UiAutomator2 server' + (test ? ' test' : '') + ' apk');

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getPackageName',
    value: function getPackageName(apk) {
      var args, _ref, stdout, apkPackage;

      return _regeneratorRuntime.async(function getPackageName$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            args = ['dump', 'badging', apk];
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.adb.initAapt());

          case 3:
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.adb.binaries.aapt, args));

          case 5:
            _ref = context$2$0.sent;
            stdout = _ref.stdout;
            apkPackage = new RegExp(/package: name='([^']+)'/g).exec(stdout);

            if (apkPackage && apkPackage.length >= 2) {
              apkPackage = apkPackage[1];
            } else {
              apkPackage = null;
            }
            return context$2$0.abrupt('return', apkPackage);

          case 10:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getAPKVersion',
    value: function getAPKVersion(apk) {
      var args, _ref2, stdout, apkVersion;

      return _regeneratorRuntime.async(function getAPKVersion$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            args = ['dump', 'badging', apk];
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.adb.initAapt());

          case 3:
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.adb.binaries.aapt, args));

          case 5:
            _ref2 = context$2$0.sent;
            stdout = _ref2.stdout;
            apkVersion = new RegExp(/versionName='([^']+)'/g).exec(stdout);

            if (apkVersion && apkVersion.length >= 2) {
              apkVersion = apkVersion[1];
            } else {
              apkVersion = null;
            }
            return context$2$0.abrupt('return', apkVersion.toString());

          case 10:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getInstalledPackageVersion',
    value: function getInstalledPackageVersion(pkg) {
      var stdout, pkgVersion;
      return _regeneratorRuntime.async(function getInstalledPackageVersion$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.adb.shell(['dumpsys', 'package', pkg]));

          case 2:
            stdout = context$2$0.sent;
            pkgVersion = new RegExp(/versionName=([^\s\s]+)/g).exec(stdout);

            if (pkgVersion && pkgVersion.length >= 2) {
              pkgVersion = pkgVersion[1];
            } else {
              pkgVersion = null;
            }
            return context$2$0.abrupt('return', pkgVersion.toString());

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'checkAndSignCert',
    value: function checkAndSignCert(apk, apkPackage) {
      var signed;
      return _regeneratorRuntime.async(function checkAndSignCert$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.adb.checkApkCert(apk, apkPackage));

          case 2:
            signed = context$2$0.sent;

            if (signed) {
              context$2$0.next = 6;
              break;
            }

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.adb.sign(apk));

          case 6:
            return context$2$0.abrupt('return', !signed);

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startSession',
    value: function startSession(caps) {
      var retries;
      return _regeneratorRuntime.async(function startSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.killUiAutomatorOnDevice());

          case 2:

            _logger2['default'].info('Starting uiautomator2 server ' + _installer.UI2_VER);

            // let cmd = ['am', 'instrument', '-w',
            //   'io.appium.uiautomator2.server.test/android.support.test.runner.AndroidJUnitRunner'];
            // this.adb.shell(cmd);
            // using 3rd party module called 'adbKit' for time being as using 'appium-adb'
            // facing IllegalStateException: UiAutomation not connected exception
            // https://github.com/appium/appium-uiautomator2-driver/issues/19

            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.startSessionUsingAdbKit(caps.deviceUDID));

          case 5:
            retries = (0, _utils.getRetries)('Server launch', caps.uiautomator2ServerLaunchTimeout, SERVER_LAUNCH_RETRIES);

            _logger2['default'].info('Waiting up to ' + retries * 1000 + 'ms for UiAutomator2 to be online...');
            // wait for UiAutomator2 to be online
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(retries, 1000, this.jwproxy.command.bind(this.jwproxy), '/status', 'GET'));

          case 9:
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(this.jwproxy.command('/session', 'POST', { desiredCapabilities: caps }));

          case 11:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startSessionUsingAdbKit',
    value: function startSessionUsingAdbKit(deviceUDID) {
      return _regeneratorRuntime.async(function startSessionUsingAdbKit$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].info('Running command: \'adb -s ' + deviceUDID + ' shell am instrument -w ' + INSTRUMENTATION_TARGET + '\'');
            this.client.shell(deviceUDID, 'am instrument -w ' + INSTRUMENTATION_TARGET).then(_adbkit2['default'].util.readAll).then(function (output) {
              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;
              var _iteratorError3 = undefined;

              try {
                for (var _iterator3 = _getIterator(output.toString().split('\n')), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                  var line = _step3.value;

                  if (line.length) {
                    _logger2['default'].debug('[UIAutomator2] ' + line);
                  }
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion3 && _iterator3['return']) {
                    _iterator3['return']();
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }
            })['catch'](function (err) {
              _logger2['default'].error('[UIAutomator2 Error] ' + err.message);
              _logger2['default'].debug('Full error: ' + err.stack);
            });

          case 2:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'deleteSession',
    value: function deleteSession() {
      return _regeneratorRuntime.async(function deleteSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Deleting UiAutomator2 server session');
            // rely on jwproxy's intelligence to know what we're talking about and
            // delete the current session
            context$2$0.prev = 1;
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.jwproxy.command('/', 'DELETE'));

          case 4:
            context$2$0.next = 9;
            break;

          case 6:
            context$2$0.prev = 6;
            context$2$0.t0 = context$2$0['catch'](1);

            _logger2['default'].warn('Did not get confirmation UiAutomator2 deleteSession worked; ' + ('Error was: ' + context$2$0.t0));

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[1, 6]]);
    }
  }, {
    key: 'killUiAutomatorOnDevice',
    value: function killUiAutomatorOnDevice() {
      return _regeneratorRuntime.async(function killUiAutomatorOnDevice$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.adb.forceStop('io.appium.uiautomator2.server'));

          case 3:
            context$2$0.next = 8;
            break;

          case 5:
            context$2$0.prev = 5;
            context$2$0.t0 = context$2$0['catch'](0);

            _logger2['default'].info("Unable to kill the io.appium.uiautomator2.server process, assuming it is already killed");

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 5]]);
    }
  }]);

  return UiAutomator2Server;
})();

exports['default'] = UiAutomator2Server;
module.exports = exports['default'];

// Installs the apks on to the device or emulator

// appending .test to apkPackage name to get test apk package name

//check server apk versionName

// kill any uiautomator existing processes
//# sourceMappingURL=data:application/json;charset=utf8;base64,
